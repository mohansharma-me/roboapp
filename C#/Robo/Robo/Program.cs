using System;
using System.Threading;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Data;
using System.Data.SqlClient;

namespace Robo
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main(String[] args)
        {
            if (args.Length != 0)
            {
                if (args[0] != null)
                {
                    if (args[0].ToLower().Equals("/uninstall"))
                    {
                        DialogResult diag=MessageBox.Show("Delete Robo's Mind which contain all the clients, sites, machines and also activation details ?"+Environment.NewLine+"Whenever you reinstall Robo this mind will be connected automatically no further data entry needs."+Environment.NewLine+"MIND Directory: "+Application.LocalUserAppDataPath,"Delete MIND ?",MessageBoxButtons.YesNo,MessageBoxIcon.Question);
                        if (diag == DialogResult.Yes)
                        {
                            try
                            {
                                System.IO.Directory.Delete(Application.LocalUserAppDataPath, true);
                            }
                            catch (Exception) { }
                        }
                    }
                }
                return;
            }
            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.ThrowException);
            AppDomain.CurrentDomain.UnhandledException+=(s,e) => {
                Exception excep = e.ExceptionObject as Exception;
                if (excep != null)
                {
                    DialogResult diag=MessageBox.Show("Unknown error generated by robo, please try restart robo with refrehed system or try to repair robo from 'Programs and Features' or restart your system" + Environment.NewLine + Environment.NewLine + "Or kindly contact Robo manufacturer with this error message:" + Environment.NewLine + Environment.NewLine + excep, "Unknown Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            };
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            app = new frmApp();
            Application.Run(app);
        }

        public static Boolean validateRights(UserRights right,String rightString) {
            if (rightString[(int)right] == '1')
                return true;
            else
                return false;
        }

        public static String templateClient="<html><head>	<title>%title%</title></head><body style='padding:0;margin:0;background:#DDD;font:12px Arial,sans-serif'>	<div style='width:1024px;margin:0px auto;background:#555;color:white;border-bottom-left-radius:15px;border-bottom-right-radius:15px;margin-top:0px;padding:10px;'>		<h1>%clientname%</h1>		<div style='font-size:16px'>			<b>Contact person:</b> %cperson% , &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			<b>Contact number:</b> %cno%<br/>			<b>Email address :</b> %email% , &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			<b>Nickname:</b> %nickname%<br/>			<b>Address:</b> %address%		</div>	</div>	<br/>	<div style='width:1024px;margin:0px auto;background:#555;color:white;border-radius:15px;margin-top:0px;padding:10px;'>		<h2>Sites</h2>		<div style='font-size:16px'>			<table cellspacing=0 cellpadding=0 border=1 width=100% style='color:white'>				<tr>					<th>ID</th><th>Name</th><th>Description</th>				</tr>				%sitetr%			</table>		</div>	</div>	<br/>	<div style='width:1024px;margin:0px auto;background:#555;color:white;border-radius:15px;margin-top:0px;padding:10px;'>		<h2>Machines</h2>		<div style='font-size:16px'>			<table cellspacing=0 cellpadding=0 border=1 width=100% style='color:white'>				<tr>					<th>M/C ID</th><th>Site name</th><th>SIM Number</th><th>Type</th><th>Status</th><th>Readings</th>				</tr>				%machinetr%			</table>		</div>	</div></body></html>";

        public static String curUser = "", curUserRights = "";
        public static String actRetString = "";
        public static bool splashError = false;
        public static String showDetails = null;
        public static bool readingMSGS = false;
        public static String selectedModem = "", selectedPort = "";
        public static frmApp app=null;
        public static String connString = @"Data Source=.\SQLEXPRESS;AttachDbFilename="+Application.StartupPath+"\\RoboMainDB.mdf;Integrated Security=True;User Instance=True";

        public static MachineVariables ParseHealthyCommand(String hString)
        {
            MachineVariables mvar = new MachineVariables("", new List<Variables>());
            String t = hString.Replace("{[","").Replace("]}","");
            String[] arr = t.Split(new String[] {"]["},StringSplitOptions.None);
            foreach (String ele in arr)
            {
                String[] arr1 = ele.Split(' ');
                Variables var = new Variables("", arr1[1], arr1[2], arr1[4], arr1[6]);
                var.Order = arr1[0];
                String uc = arr1[3];
                if (uc.Equals("1")) var.UnhealthyCondition = 1;
                if (uc.Equals("0")) var.UnhealthyCondition = 0;
                if (uc.Equals("-1")) var.UnhealthyCondition = -1;
                uc = arr1[5];
                if (uc.Equals("1")) var.StopedCondition = 1;
                if (uc.Equals("0")) var.StopedCondition = 0;
                if (uc.Equals("-1")) var.StopedCondition = -1;
                mvar.variables.Add(var);
            }
            return mvar;
        }
    }

    public enum UserRights
    {
        AddClients=0,ViewClients=1,
        AddSites=2,ViewSites=3,
        AddMachines=4,ViewMachines=5,
        MachineOperation=6,MachineSettings=7,
        ManageUsers=8,EmailReports=9,
        Messages=10
    };

    class UserSetting
    {
        public static IWin32Window owner { get; set; }
        public static bool LastResult { get; set; }
        public static String Activation 
        {
            get { return fetchColumn("robo_activation"); }
            set { LastResult = writeColumn("robo_activation", value); }
        }
        public static String StartFlusingMessage
        {
            get { return fetchColumn("machine_flusing"); }
            set { LastResult = writeColumn("machine_flusing", value); }
        }
        public static String WriteSettingMessage
        {
            get { return fetchColumn("write_setting"); }
            set { LastResult = writeColumn("write_setting", value); }
        }
        public static String WriteSettingSeparator
        {
            get { return fetchColumn("ws_separator"); }
            set { LastResult = writeColumn("ws_separator", value); }
        }
        public static String CarbonFilterBackWashMessage { 
            get { return fetchColumn("machine_cfbw"); }
            set { LastResult = writeColumn("machine_cfbw", value); }
        }
        public static String SandFilterBackWashMessage { 
            get { return fetchColumn("machine_sandfbw"); }
            set { LastResult = writeColumn("machine_sandfbw", value); }
        }
        public static String SoftnerFilterBackWashMessage { 
            get { return fetchColumn("machine_softnerfbw"); }
            set { LastResult = writeColumn("machine_softnerfbw", value); }
        }
        public static String MachineStartMessage { 
            get { return fetchColumn("machine_start"); }
            set { LastResult = writeColumn("machine_start", value); }
        }
        public static String MachineStopMessage { 
            get { return fetchColumn("machine_stop"); }
            set { LastResult = writeColumn("machine_stop", value); }
        }
        public static String ReadSettingMessage { 
            get { return fetchColumn("read_setting"); }
            set { LastResult = writeColumn("read_setting", value); }
        }
        public static String ReadStatusMessage { 
            get { return fetchColumn("read_status"); }
            set { LastResult = writeColumn("read_status", value); }
        }
        public static String StatusMessageFormat { 
            get { return fetchColumn("status_format"); }
            set { LastResult = writeColumn("status_format", value); }
        }
        public static String SettingMessageFormat { 
            get { return fetchColumn("setting_format"); }
            set { LastResult = writeColumn("setting_format", value); }
        }

        private static bool writeColumn(String columnName,String value)
        {
            bool output = false;
            try
            {
                SqlConnection conn = new SqlConnection(Program.connString);
                conn.Open();
                SqlCommand cmd = new SqlCommand("update user_settings set "+columnName+"=@value", conn);
                cmd.Parameters.AddWithValue("@value",value);
                cmd.ExecuteNonQuery();
                conn.Close();
                output = true;
            }
            catch (Exception ex)
            {
                if (owner != null)
                MessageBox.Show(owner,"Unable to save setting value: "+value+" into mind.","Mind error",MessageBoxButtons.OK,MessageBoxIcon.Error);
            }
            return output;
        }
        private static String fetchColumn(String columnName)
        {
            String output = "";
            try
            {
                SqlConnection conn = new SqlConnection(Program.connString);
                conn.Open();
                SqlCommand cmd = new SqlCommand("select "+columnName+" from user_settings", conn);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    output = dr[0].ToString();
                }
                dr.Close();
                conn.Close();
            }
            catch (Exception ex)
            {
                if(owner!=null)
                MessageBox.Show(owner, "Unable to read setting value from id: " + columnName + " from mind.", "Mind error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return output;
        }
    }
    
    class ComboBoxItem
    {
        public ComboBoxItem()
        {
            Text = Value = "";
        }
        public ComboBoxItem(String displayText, String hiddenValue)
        {
            Text = displayText;
            Value = hiddenValue;
        }
        public ComboBoxItem(String displayText, String hiddenValue,String index)
        {
            Text = displayText;
            Value = hiddenValue;
            Index = index;
        }

        public string Text { get; set; }
        public string Value { get; set; }
        public string Index { get; set; }
        public override string ToString()
        {
            
            return Text;
        }
    }

    /**
     * public static String __getFormattedValue(ComboBoxItem cmb)
        {
            String text = cmb.Text.ToLower().Trim();
            String value = cmb.Value.ToLower().Trim();
            String final = cmb.Value.Trim();
            if (text.Contains("amp"))
            {
                if (value.Length == 3)
                {
                    final = value.Substring(0, 2) + "." + value.Substring(value.Length - 1);
                }
                else if (value.Length == 2)
                {
                    final = value.Substring(0, 1) + "." + value.Substring(value.Length - 1);
                }
            }
            else if (text.Contains("time"))
            {
                if (value.Length == 2)
                {
                    final = value;
                }
                else if (value.Length == 4)
                {
                    final = value.Substring(0, 2) + ":" + value.Substring(2, 2);
                }
                else if (value.Length == 6)
                {
                    final = value.Substring(0, 2) + ":" + value.Substring(2, 2) + ":" + value.Substring(4, 2);
                }
            }
            else if (text.Contains("date"))
            {
                final = value.Substring(0, 2) + "/" + value.Substring(2, 2) + "/" + value.Substring(4, 2);
            }
            else if (text.Contains("hours"))
            {
                if (value.Length == 2)
                {
                    final = value;
                }
                else if (value.Length == 4)
                {
                    final = value.Substring(0, 2) + ":" + value.Substring(2, 2);
                }
            }
            return final;
        }
     * 
     * **/
}
